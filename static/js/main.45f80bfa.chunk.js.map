{"version":3,"sources":["components/Header.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","_props$state","state","city","temp","humidity","pressure","wind","tempMax","tempMin","description","country","error","descriptionPL","toUpperCase","API_KEY","App","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","status","json","_this","setState","main","temp_max","temp_min","weather","speed","sys","stop","this","Fragment","components_Header","components_Form","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAQeA,SANA,kBACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,4BAAd,6CCUWC,EAZF,SAAAC,GAAK,OAChBL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYG,SAAUD,EAAME,YAC1CP,EAAAC,EAAAC,cAAA,SACEC,UAAU,aACVK,KAAK,OACLC,KAAK,OACLC,YAAY,+BAEdV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAlB,kBC2FWQ,EAnGC,SAAAN,GAAS,IAAAO,EAYlBP,EAAMQ,MAVPC,EAFmBF,EAEnBE,KACAC,EAHmBH,EAGnBG,KACAC,EAJmBJ,EAInBI,SACAC,EALmBL,EAKnBK,SACAC,EANmBN,EAMnBM,KACAC,EAPmBP,EAOnBO,QACAC,EARmBR,EAQnBQ,QACAC,EATmBT,EASnBS,YACAC,EAVmBV,EAUnBU,QACAC,EAXmBX,EAWnBW,MAGCC,EAAgB,KAEpB,OAAQH,GACL,IAAK,YACFG,EAAgB,+BAChB,MACH,IAAK,aACFA,EAAgB,sBAChB,MACH,IAAK,mBACFA,EAAgB,2BAChB,MACH,IAAK,gBACFA,EAAgB,qBAChB,MACH,IAAK,cACFA,EAAgB,kCAChB,MACH,IAAK,OACFA,EAAgB,qDAChB,MACH,IAAK,eACFA,EAAgB,sBAChB,MACH,IAAK,OACFA,EAAgB,aAChB,MACH,IAAK,OACFA,EAAgB,YAChB,MACH,QACGA,EAAgB,yBAGtB,OACGxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXW,IAASS,GACPvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACZH,EAAAC,EAAAC,cAAA,aACGF,EAAAC,EAAAC,cAAA,aACGF,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UAAKY,EAAKW,gBAEbzB,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,UAAKa,EAAL,UAEHf,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,UAAKc,EAAL,OAEHhB,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,UAAKe,EAAL,SAEHjB,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,UAAKgB,EAAL,WAEHlB,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,UAAKiB,EAAL,UAEHnB,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,UAAKkB,EAAL,UAEHpB,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,UAAKsB,IAERxB,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UAAKoB,OAMnBC,GAASvB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAiBoB,KC1F3CG,EAAU,mCAgEDC,6MA7DZd,MAAQ,CACLC,KAAM,KACNE,SAAU,KACVC,SAAU,KACVF,KAAM,KACNI,QAAS,KACTC,QAAS,KACTE,QAAS,KACTD,YAAa,KACbH,KAAM,KACNK,MAAO,QAGVhB,iDAAa,SAAAqB,EAAMC,GAAN,IAAAf,EAAAgB,EAAAC,EAAA,OAAAC,EAAA/B,EAAAgC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACVP,EAAEQ,mBACIvB,EAAOe,EAAES,OAAOC,SAASzB,KAAK0B,OAF1B,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAKgBK,MAAK,qDAAAC,OAC4B5B,EAD5B,qBAAA4B,OACoDhB,EADpD,kBALrB,UASiB,OAJlBI,EALCI,EAAAS,MASMC,OATN,CAAAV,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAUeN,EAASe,OAVxB,OAUEd,EAVFG,EAAAS,KAYJG,EAAKC,SAAS,CACXjC,KAAMA,EACNE,SAAUe,EAAKiB,KAAKhC,SACpBC,SAAUc,EAAKiB,KAAK/B,SACpBF,KAAMgB,EAAKiB,KAAKjC,KAChBI,QAASY,EAAKiB,KAAKC,SACnB7B,QAASW,EAAKiB,KAAKE,SACnB7B,YAAaU,EAAKoB,QAAQ,GAAG9B,YAC7BH,KAAMa,EAAKb,KAAKkC,MAChB9B,QAASS,EAAKsB,IAAI/B,QAClBC,MAAO,OAtBNW,EAAAE,KAAA,iBAyBJU,EAAKC,SAAS,CACXxB,MACG,gLA3BF,QAAAW,EAAAE,KAAA,iBA+BPU,EAAKC,SAAS,CACXxB,MAAO,oCAhCH,yBAAAW,EAAAoB,SAAA1B,EAAA2B,uIAsCV,OACGvD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuD,SAAA,KACGxD,EAAAC,EAAAC,cAACuD,EAAD,MACAzD,EAAAC,EAAAC,cAACwD,EAAD,CAAMnD,WAAYgD,KAAKhD,aACvBP,EAAAC,EAAAC,cAACyD,EAAD,CAAS9C,MAAO0C,KAAK1C,gBAxDf+C,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.45f80bfa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => (\r\n  <div className=\"header-container\">\r\n    <h1 className=\"header-container__header\">Sprawdź aktualną pogodę</h1>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Form = props => (\r\n  <form className=\"form-form\" onSubmit={props.getWeather}>\r\n    <input\r\n      className=\"form-input\"\r\n      type=\"text\"\r\n      name=\"city\"\r\n      placeholder=\"Wpisz nazwę miasta...\"\r\n    />\r\n    <button className=\"form-button\">Sprawdź</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => {\r\n   const {\r\n      city,\r\n      temp,\r\n      humidity,\r\n      pressure,\r\n      wind,\r\n      tempMax,\r\n      tempMin,\r\n      description,\r\n      country,\r\n      error\r\n   } = props.state;\r\n\r\n   let descriptionPL = null;\r\n\r\n   switch (description) {\r\n      case \"clear sky\":\r\n         descriptionPL = \"Dziś niebo jest czyste!\";\r\n         break;\r\n      case \"few clouds\":\r\n         descriptionPL = \"Lekkie zachmurzenie\";\r\n         break;\r\n      case \"scattered clouds\":\r\n         descriptionPL = \"Zachmurzenie umiarkowane\";\r\n         break;\r\n      case \"broken clouds\":\r\n         descriptionPL = \"Mocne zachmurzenie\";\r\n         break;\r\n      case \"shower rain\":\r\n         descriptionPL = \"Może delikatnie padać\";\r\n         break;\r\n      case \"rain\":\r\n         descriptionPL = \"Deszczowo. Może się przydać parasol\";\r\n         break;\r\n      case \"thunderstorm\":\r\n         descriptionPL = \"Możliwe burze!\";\r\n         break;\r\n      case \"snow\":\r\n         descriptionPL = \"Śnieg\";\r\n         break;\r\n      case \"mist\":\r\n         descriptionPL = \"Mgła\";\r\n         break;\r\n      default:\r\n         descriptionPL = \"Brak danych podogowych\";\r\n   }\r\n\r\n   return (\r\n      <div className=\"weather-wrapper\">\r\n         {city && !error && (\r\n            <div className=\"weather-container\">\r\n               <table>\r\n                  <tbody>\r\n                     <tr>\r\n                        <td>Miasto:</td>\r\n                        <td>{city.toUpperCase()}</td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>Temperatura:</td>\r\n                        <td>{temp} st.C</td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>Wilgotność:</td>\r\n                        <td>{humidity} %</td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>Ciśnienie:</td>\r\n                        <td>{pressure} hPa</td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>Prędkość wiatru:</td>\r\n                        <td>{wind} m/sec</td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>Temperatura MAX</td>\r\n                        <td>{tempMax} st.C</td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>Temperatura MIN:</td>\r\n                        <td>{tempMin} st.C</td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>Warunki pogodowe:</td>\r\n                        <td>{descriptionPL}</td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>Kraj:</td>\r\n                        <td>{country}</td>\r\n                     </tr>\r\n                  </tbody>\r\n               </table>\r\n            </div>\r\n         )}\r\n         {error && <p className=\"weather-error\">{error}</p>}\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"eaf3b3ced9c95ebda7a7abb45d46516d\";\n\nclass App extends Component {\n   state = {\n      city: null,\n      humidity: null,\n      pressure: null,\n      temp: null,\n      tempMax: null,\n      tempMin: null,\n      country: null,\n      description: null,\n      wind: null,\n      error: null\n   };\n\n   getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n\n      if (city) {\n         const api_call = await fetch(\n            `https://api.openweathermap.org/data/2.5/weather?q=${city}&mode=json&appid=${API_KEY}&units=metric`\n         );\n\n         if (api_call.status === 200) {\n            const data = await api_call.json();\n\n            this.setState({\n               city: city,\n               humidity: data.main.humidity,\n               pressure: data.main.pressure,\n               temp: data.main.temp,\n               tempMax: data.main.temp_max,\n               tempMin: data.main.temp_min,\n               description: data.weather[0].description,\n               wind: data.wind.speed,\n               country: data.sys.country,\n               error: null\n            });\n         } else {\n            this.setState({\n               error:\n                  \"Nie znaleziono wskazanego miasta w bazie danych. Spróbuj jeszcze raz! Aby sprawdzić miasto znajdujące się poza terenem Polski użyj angielskiej nazwy\"\n            });\n         }\n      } else {\n         this.setState({\n            error: \"Wprowadź nazwę miasta\"\n         });\n      }\n   };\n\n   render() {\n      return (\n         <>\n            <Header />\n            <Form getWeather={this.getWeather} />\n            <Weather state={this.state} />\n         </>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}